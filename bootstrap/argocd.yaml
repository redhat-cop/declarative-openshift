---
apiVersion: argoproj.io/v1beta1
kind: ArgoCD
metadata:
  name: openshift-gitops
  namespace: gitops
spec:
  resourceTrackingMethod: annotation
  kustomizeBuildOptions: --enable-alpha-plugins --load-restrictor LoadRestrictionsNone --helm-command /usr/local/bin/helm
  extraConfig:
    resource.compareoptions: |
      ignoreAggregatedRoles: true
  server:
    autoscale:
      enabled: false
    grpc:
      ingress:
        enabled: false
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 125m
        memory: 128Mi
    insecure: true
    route:
      enabled: true
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
    service:
      type: ""
  resourceIgnoreDifferences:
    resourceIdentifiers:
      - customization:
          jsonPointers:
            - /data
        kind: Secret
  resourceHealthChecks:
  - group: argoproj.io
    kind: Application
    check: |
      hs = {}
      hs.status = "Progressing"
      hs.message = ""
      if obj.status ~= nil then
        if obj.status.health ~= nil then
          hs.status = obj.status.health.status
          hs.message = obj.status.health.message
        end
      end
      return hs
  - group: route.openshift.io
    kind: Route
    check: |
      health_status = {}
      if obj.status ~= nil then
        if obj.status.ingress ~= nil then
          numIngressRules = 0
          numTrue = 0
          numFalse = 0
          for _, ingressRules in pairs(obj.status.ingress) do
              numIngressRules = numIngressRules + 1
              if obj.status.ingress ~= nil then
                for _, condition in pairs(ingressRules.conditions) do
                    if condition.type == "Admitted" and condition.status == "True" then
                        numTrue = numTrue + 1
                    elseif condition.type == "Admitted" and condition.status == "False" then
                        numFalse = numFalse + 1
                    end
                end
              end
              health_status.status = 'Test'
          end
          if numTrue == numIngressRules then
            health_status.status = "Healthy"
            health_status.message = "Route is healthy"
            return health_status
          elseif numFalse > 0 then
            health_status.status = "Degraded"
            health_status.message = "Route is degraded"
            return health_status
          else
            health_status.status = "Progressing"
            health_status.message = "Route is still getting admitted"
            return health_status
          end
        end
      end
      health_status.status = "Progressing"
      health_status.message = "Route is still getting admitted"
      return health_status
  - group: operators.coreos.com
    kind: Subscription
    check: |
      health_status = {}
      if obj.status ~= nil then
        if obj.status.conditions ~= nil then
          numDegraded = 0
          numPending = 0
          msg = ""
          for i, condition in pairs(obj.status.conditions) do
            msg = msg .. i .. ": " .. condition.type .. " | " .. condition.status .. "\n"
            if condition.type == "InstallPlanPending" and condition.status == "True" then
              numPending = numPending + 1
            elseif (condition.type == "InstallPlanMissing" and condition.reason ~= "ReferencedInstallPlanNotFound") then
              numDegraded = numDegraded + 1
            elseif (condition.type == "CatalogSourcesUnhealthy" or condition.type == "InstallPlanFailed" or condition.type == "ResolutionFailed") and condition.status == "True" then
              numDegraded = numDegraded + 1
            end
          end
          if numDegraded == 0 and numPending == 0 then
            health_status.status = "Healthy"
            health_status.message = msg
            return health_status
          elseif numPending > 0 and numDegraded == 0 then
            health_status.status = "Progressing"
            health_status.message = "An install plan for a subscription is pending installation"
            return health_status
          else
            health_status.status = "Degraded"
            health_status.message = msg
            return health_status
          end
        end
      end
      health_status.status = "Progressing"
      health_status.message = "An install plan for a subscription is pending installation"
      return health_status
  - group: operators.coreos.com
    kind: InstallPlan
    check: |   
      hs = {}
      if obj.status ~= nil then
        if obj.status.phase ~= nil then
          if obj.status.phase == "Complete" then
            hs.status = "Healthy"
            hs.message = obj.status.phase
            return hs
          end
        end
      end
      hs.status = "Progressing"
      hs.message = "Waiting for InstallPlan to complete"
      return hs
  grafana:
    enabled: false
    ingress:
      enabled: false
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
    route:
      enabled: false
  prometheus:
    enabled: false
    ingress:
      enabled: false
    route:
      enabled: false
  initialSSHKnownHosts: {}
  applicationSet:
    #extraCommandArgs:
    #  - --enable-progressive-syncs
    resources:
      limits:
        cpu: "2"
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi
  rbac:
    defaultPolicy: 'role:none'
    policy: |
      p, role:none, *, *, */*, deny
      g, system:cluster-admins, role:admin
      g, cluster-admins, role:admin
      g, admin, role:admin
    scopes: "[groups]"
  repo:
    resources:
      limits:
        cpu: "1"
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 256Mi
  resourceExclusions: |
    - apiGroups:
      - internal.open-cluster-management.io
      kinds:
      - ManagedClusterInfo
      clusters:
      - "*"
    - apiGroups:
      - tekton.dev
      clusters:
      - '*'
      kinds:
      - TaskRun
      - PipelineRun
    - apiGroups:
      - "*"
      kinds:
      - ProviderConfigUsage   
  sso:
    dex:
      resources:
        limits:
          cpu: 500m
          memory: 256Mi
        requests:
          cpu: 250m
          memory: 128Mi
      openShiftOAuth: true
    provider: dex
  ha:
    enabled: false
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
  tls:
    ca: {}
  redis:
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
  controller:
    processors: {}
    resources:
      limits:
        cpu: "2"
        memory: 2Gi
      requests:
        cpu: 250m
        memory: 1Gi
    sharding: {}